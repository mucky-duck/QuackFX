<?xml version="1.0" encoding="utf-8"?>
<!--QuackFX-->
<includes>
	<!-- Spotlight Row Details -->
	<include name="SpotlightRowDetails">
		<control type="grouplist">
			<orientation>horizontal</orientation>
			<usecontrolcoords>true</usecontrolcoords>
			<height>40</height>
			<itemgap>15</itemgap>

            <!-- New -->
            <control type="label" id="611108">
                <visible>!String.IsEmpty(Control.GetLabel(611108))</visible>
                <posy>5</posy>
                <height>35</height>
                <width>auto</width>
                <aligny>center</aligny>
                <font>Reg22</font>
                <textcolor>green</textcolor>
                <label>$VAR[NewItem]</label>
                <include>Default_Fade</include>
            </control>

			<!-- Thumbs Up/Down -->
            <!-- Thumbs Up -->
            <control type="image" id="6111091">
                <include>ThumbsUpMinCondition</include>
                <posy>5</posy>
                <width>25</width>
                <height>30</height>
                <aspectratio align="left" aligny="center">keep</aspectratio>
                <colordiffuse>NetflixPrimaryTextColor</colordiffuse>
                <texture background="true">thumbs-up.png</texture>
                <include>Default_Fade</include>
            </control>
            <!-- Thumbs Down -->
            <control type="image" id="6111092">
                <include>ThumbsDownMaxCondition</include>
                <posy>10</posy>
                <width>25</width>
                <height>30</height>
                <aspectratio align="left" aligny="center">keep</aspectratio>
                <colordiffuse>NetflixPrimaryTextColor</colordiffuse>
                <texture flipy="true" background="true">thumbs-up.png</texture>
                <include>Default_Fade</include>
            </control>

			<!-- Stars rating -->
			<control type="image" id="611110">
                <visible>!String.IsEmpty(Control.GetLabel(611110)) + [!Control.IsVisible(6111091) + !Control.IsVisible(6111092)]</visible>
				<posy>5</posy>
				<width>160</width>
				<height>35</height>
				<aspectratio align="left" aligny="center">keep</aspectratio>
				<colordiffuse>ViewDetailsHighlightTextColor</colordiffuse>
				<texture background="true">$VAR[rating_value_texture]</texture>
                <include>Default_Fade</include>
			</control>


			<!-- Year / Premiered / PVR Time -->
			<control type="label" id="611111">
                <visible>!String.IsEmpty(Control.GetLabel(611111))</visible>
				<posy>5</posy>
				<height>35</height>
				<width>auto</width>
				<aligny>center</aligny>
				<font>Reg22</font>
				<textcolor>NetflixPrimaryTextColor</textcolor>
				<label>$VAR[YearOrPremieredOrPVR]</label>
                <include>Default_Fade</include>
			</control>

			<!-- MPAA -->
			<control type="group" id="611112">
                <visible>!String.IsEmpty(Control.GetLabel(6111121))</visible>
				<width>90</width>
				<height>39</height>
                <include>Default_Fade</include>
				<control type="image">
					<height>100%</height>
					<width>100%</width>
					<texture colordiffuse="NetflixDetailsFlagColor">netflix/frame/square-rounded.png</texture>
				</control>
				<control type="label" id="6111121">
					<height>100%</height>
					<width>100%</width>
					<font>Reg22</font>
					<textcolor>NetflixPrimaryTextColor</textcolor>
					<align>center</align>
                    <aligny>center</aligny>
                    <scroll>false</scroll>
					<label>$VAR[GetMPAA]</label>
				</control>
			</control>

			<!-- Duration / Total Seasons/Episodes -->
			<control type="label" id="611113">
				<posy>5</posy>
				<visible>!String.IsEmpty(Control.GetLabel(611113))</visible>
				<width>auto</width>
				<label>$VAR[DurationOrTotalSECount]</label>
				<height>35</height>
				<aligny>center</aligny>
				<textcolor>NetflixPrimaryTextColor</textcolor>
				<font>Reg22</font>
                <include>Default_Fade</include>
			</control>

			<!-- Resolution -->
			<control type="group" id="611114">
                <visible>!String.IsEmpty(Control.GetLabel(6111141))</visible>
				<width>65</width>
				<height>40</height>
                <include>Default_Fade</include>
				<control type="image">
					<height>100%</height>
					<width>100%</width>
					<texture colordiffuse="NetflixDetailsFlagColor">netflix/frame/frame.png</texture>
				</control>
				<control type="label" id="6111141">
					<width>100%</width>
					<height>100%</height>
					<aligny>center</aligny>
					<align>center</align>
					<textcolor>NetflixPrimaryTextColor</textcolor>
					<font>Reg22</font>
                    <scroll>false</scroll>
                    <label>$VAR[GetResolution]</label>
				</control>
			</control>

			<!-- Audio Channels -->
			<control type="group" id="611115">
                <visible>!String.IsEmpty(Control.GetLabel(6111151))</visible>
				<width>55</width>
				<height>40</height>
                <include>Default_Fade</include>
				<control type="image">
					<height>100%</height>
					<width>100%</width>
					<texture colordiffuse="NetflixDetailsFlagColor">netflix/frame/frame.png</texture>
				</control>
				<control type="label" id="6111151">
					<width>100%</width>
					<height>100%</height>
					<aligny>center</aligny>
					<align>center</align>
					<textcolor>NetflixPrimaryTextColor</textcolor>
					<font>Reg22</font>
                    <scroll>false</scroll>
                    <label>$VAR[GetAudioChannels]</label>
				</control>
			</control>
		</control>
	</include>

    <!-- default fade animation -->
    <include name="Default_Fade">
        <animation effect="fade" time="400">Visible</animation>
    </include>

    <!-- New Item Tag -->
    <variable name="NewItem">
        <value condition="String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.Property(DBTYPE),movie) | String.IsEqual(Window(Home).Property(ListItem.DBTYPE,movie)) | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),movie)">$VAR[NewMovieItem]</value>
        <value condition="String.IsEqual(ListItem.DBTYPE,episode) | String.IsEqual(ListItem.Property(DBTYPE),episode) | String.IsEqual(Window(Home).Property(ListItem.DBTYPE,episode)) | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),episode)">$VAR[NewEpisodeItem]</value>
        <value condition="String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.Property(DBTYPE),tvshow) | String.IsEqual(Window(Home).Property(ListItem.DBTYPE,tvshow)) | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),tvshow)">$VAR[NewTVShowItem]</value>
    </variable>

    <!-- New Movie -->
    <variable name="NewMovieItem">
        <!-- last 10 added movies -->
        <!-- localize -->
        <value condition="String.IsEqual(Window(Home).Property(LatestMovie.1.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.3.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.5.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.7.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),ListItem.Title) |
        String.IsEqual(Window(Home).Property(LatestMovie.9.Title),ListItem.Title) | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),ListItem.Title)">[CAPITALIZE]new[/CAPITALIZE]</value>
    </variable>

    <!-- New TVShow -->
    <variable name="NewTVShowItem">
        <!-- last 10 added episodes that are ep. in season 1 of the tvshow -->
        <!-- localize -->
        <value condition="[String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),1)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),1)]">[CAPITALIZE]new[/CAPITALIZE]</value>
    </variable>

    <!-- New Episode -->
    <variable name="NewEpisodeItem">
        <!-- new episode: last 10 added ep. -->
        <!-- localize -->
        <value condition="[String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TVShowTitle)] |
        [String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title) + String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TVShowTitle)]">[CAPITALIZE]new[/CAPITALIZE]</value>
    </variable>

	<!-- Choose Year / Premiered / PVR -->
	<variable name="YearOrPremieredOrPVR">
		<value condition="String.IsEqual(ListItem.DBTYPE,episode) | String.IsEqual(ListItem.Property(DBTYPE),episode) | String.IsEqual(Window(Home).Property(ListItem.DBTYPE,episode)) | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),episode)">$VAR[GetPremiered]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE)">$VAR[GetPVRTimings]</value>
        <value>$VAR[GetYear]</value>
	</variable>

	<!-- Choose Duration Or Total Seasons/Episodes count -->
	<variable name="DurationOrTotalSECount">
		<value condition="String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.Property(DBTYPE),tvshow) | String.IsEqual(Window(Home).Property(ListItem.DBTYPE,tvshow)) | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),tvshow)">$VAR[GetTotalSeasonEpisodeCount]</value>
		<value>$VAR[GetDuration]</value>
	</variable>

	<!-- Premiered Info -->
	<variable name="GetPremiered">
		<value condition="!String.IsEmpty(ListItem.Premiered)">$INFO[ListItem.Premiered]</value>
		<value condition="[Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + !String.IsEmpty(Container(1508).ListItem.Premiered)">$INFO[Container(1508).ListItem.Premiered]</value>
		<value condition="!String.IsEmpty(Window(Home).Property(ListItem.Premiered))">$INFO[Window(Home).Property(ListItem.Premiered)]</value>
		<value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Premiered))">$INFO[Window(Home).Property(SkinHelper.ListItem.Premiered)]</value>
	</variable>

	<!--Year Info -->
	<variable name="GetYear">
		<value condition="!String.IsEmpty(ListItem.Year)">$INFO[ListItem.Year]</value>
		<value condition="[Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + !String.IsEmpty(Container(1508).ListItem.Year)">$INFO[Container(1508).ListItem.Year]</value>
		<value condition="!String.IsEmpty(Window(Home).Property(ListItem.Year))">$INFO[Window(Home).Property(ListItem.Year)]</value>
		<value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Year))">$INFO[Window(Home).Property(SkinHelper.ListItem.Year)]</value>
	</variable>

    <!-- PVR Times Info (Start, Date, etc) -->
    <variable name="GetPVRTimings">
        <value condition="!String.IsEmpty(ListItem.Property(StartDateTime))">$INFO[ListItem.Property(StartDateTime)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(DateTime)) + !String.IsEmpty(ListItem.Label2)">$INFO[ListItem.Property(DateTime)]</value>
        <value condition="!String.IsEmpty(ListItem.StartTime)">$INFO[ListItem.StartTime]</value>
    </variable>

    <!--Duration Info -->
    <variable name="GetDuration">
        <!-- Hours not disabled -->
        <!-- normal -->
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + Integer.IsGreater(ListItem.Duration(h),0)">$INFO[ListItem.Duration(h),,h ]$INFO[ListItem.Duration(m),,m]</value>
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + Integer.IsEqual(ListItem.Duration(h),0)">$INFO[ListItem.Duration(mins),,m]</value>
        <!-- spotlight -->
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + [Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + Integer.IsGreater(Container(1508).ListItem.Duration(h),0)">$INFO[Container(1508).ListItem.Duration(h),,h ]$INFO[Container(1508).ListItem.Duration(m),,m]</value>
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + [Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + Integer.IsEqual(Container(1508).ListItem.Duration(h),0)">$INFO[Container(1508).ListItem.Duration(mins),,m]</value>
        <!--home -->
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + Integer.IsGreater(Window(Home).Property(ListItem.Duration(h),0))">$INFO[Window(Home).Property(ListItem.Duration)(h),,h ]$INFO[Window(Home).Property(ListItem.Duration)(m),,m]</value>
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + Integer.IsEqual(Window(Home).Property(ListItem.Duration(h),0))">$INFO[Window(Home).Property(ListItem.Duration)(mins),,m]</value>
        <!-- fallback -->
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + String.IsEqual(Window(Home).Property(SkinHelper.ListItem.Duration.Hours),00)">$INFO[Window(Home).Property(SkinHelper.ListItem.Duration.Minutes),,m]</value>
        <value condition="!Skin.HasSetting(SkinHelper.DisableHoursDuration) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Duration.Hours))">$INFO[Window(Home).Property(SkinHelper.ListItem.Duration.Hours),,h ]$INFO[Window(Home).Property(SkinHelper.ListItem.Duration.Minutes),,m]</value>
        <!-- Hours disabled -->
        <value condition="Skin.HasSetting(SkinHelper.DisableHoursDuration) + !String.IsEmpty(ListItem.Duration)">$INFO[ListItem.Duration(mins),,m]</value>
        <value condition="Skin.HasSetting(SkinHelper.DisableHoursDuration) + [Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + !String.IsEmpty(Container(1508).ListItem.Duration)">$INFO[Container(1508).ListItem.Duration(mins),,m]</value>
        <value condition="Skin.HasSetting(SkinHelper.DisableHoursDuration) + !String.IsEmpty(Window(Home).Property(ListItem.Duration))">$INFO[Window(Home).Property(ListItem.Duration)(mins),,m]</value>
        <!-- fallback -->
        <value condition="!String.IsEmpty(ListItem.Duration)">$INFO[ListItem.Duration,,m]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Duration))">$INFO[Window(Home).Property(ListItem.Duration),,m]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Duration))">$INFO[Window(Home).Property(SkinHelper.ListItem.Duration),,m]</value>
    </variable>

    <!-- Total Seasons/Episodes Info -->
    <variable name="GetTotalSeasonEpisodeCount">
        <!--normal-->
        <value condition="Integer.IsGreater(ListItem.Property(TotalSeasons),1)">$INFO[ListItem.Property(TotalSeasons),, $LOCALIZE[33054]]</value>
        <value condition="Integer.IsEqual(ListItem.Property(TotalEpisodes),1)">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20359]]</value>
        <value condition="Integer.IsGreaterOrEqual(ListItem.Property(TotalEpisodes),0)">$INFO[ListItem.Property(TotalEpisodes),, $LOCALIZE[20360]]</value>
        <!--spotlight-->
        <value condition="[Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + Integer.IsGreater(Container(1508).ListItem.Property(TotalSeasons),1)">$INFO[Container(1508).ListItem.Property(TotalSeasons),, $LOCALIZE[33054]]</value>
        <value condition="[Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + Integer.IsEqual(Container(1508).ListItem.Property(TotalEpisodes),1)">$INFO[Container(1508).ListItem.Property(TotalEpisodes),, $LOCALIZE[20359]]</value>
        <value condition="[Control.HasFocus(1508) | ControlGroup(505).HasFocus()] + Integer.IsGreaterOrEqual(Container(1508).ListItem.Property(TotalEpisodes),0)">$INFO[Container(1508).ListItem.Property(TotalEpisodes),, $LOCALIZE[20360]]</value>
        <!--home-->
        <value condition="Integer.IsGreater(Window(Home).Property(ListItem.Property.TotalSeasons),1)">$INFO[Window(Home).Property(ListItem.Property(TotalSeasons)),, $LOCALIZE[33054]]</value>
        <value condition="Integer.IsEqual(Window(Home).Property(ListItem.Property.TotalEpisodes),1)">$INFO[Window(Home).Property(ListItem.Property(TotalEpisodes)),, $LOCALIZE[20359]]</value>
        <value condition="Integer.IsGreaterOrEqual(Window(Home).Property(ListItem.Property.TotalEpisodes),0)">$INFO[Window(Home).Property(ListItem.Property(TotalEpisodes)),, $LOCALIZE[20360]]</value>
    </variable>

    <!-- MPAA Info -->
    <variable name="GetMPAA">
        <!-- normal listitems -->
        <!-- US -->
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">G</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">PG-13</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">PG</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.IsEqual(ListItem.mpaa,R)">R</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">NC-17</value>
        <!-- UK -->
        <value condition="String.Contains(ListItem.mpaa,UK:U)">UK-ALL</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG)">UK-PG</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A)">UK-12A</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12)">UK-12</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15)">UK-15</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18)">UK-18</value>
        <!-- DE -->
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK 16)">FSK-16</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK 6)">FSK-6</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK 12)">FSK-12</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK 18)">FSK-18</value>
        <value condition="String.Contains(ListItem.mpaa,Germany)|String.Contains(ListItem.mpaa,FSK)| String.Contains(ListItem.mpaa,o.A) | String.Contains(ListItem.mpaa,FSK 0)">FSK-0</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">BA</value>
        <!-- HU -->
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">KN</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">12</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">16</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">18</value>
        <!-- FR -->
        <value condition="String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,partir de 3 ans) | String.Contains(ListItem.mpaa,partir de 6 ans)">CSA-U</value>
        <value condition="String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">CSA-10</value>
        <value condition="String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">CSA-12</value>
        <value condition="String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">CSA-16</value>
        <value condition="String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">CSA-18</value>
        <!-- BR -->
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">L</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">10</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">12</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">14</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">16</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">18</value>
        <value condition="!String.IsEmpty(ListItem.mpaa) + !String.Contains(ListItem.mpaa,not rated) + !String.Contains(ListItem.mpaa,n/a)">$INFO[ListItem.MPAA]</value>
        <!-- home widgets -->
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),US:G) | String.Contains(Window(Home).Property(ListItem.mpaa),USA:G) | String.Contains(Window(Home).Property(ListItem.mpaa),Rated G)]">G</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),PG-13)">PG-13</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Rated PG) | String.IsEqual(Window(Home).Property(ListItem.Mpaa),PG)]">PG</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),US:R) | String.Contains(Window(Home).Property(ListItem.mpaa),USA:R) | String.Contains(Window(Home).Property(ListItem.mpaa),Rated R) | String.IsEqual(Window(Home).Property(ListItem.mpaa),R)]">R</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),US:NC-17)| String.Contains(Window(Home).Property(ListItem.mpaa),USA:NC-17)| String.Contains(Window(Home).Property(ListItem.mpaa),Rated NC-17)]">NC-17</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:U)">UK-ALL</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:PG)">UK-PG</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:12A)">UK-12A</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:12)">UK-12</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:15)">UK-15</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),UK:18)">UK-18</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Germany:16) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 16) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 16)]">FSK-16</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Germany:6)| String.Contains(Window(Home).Property(ListItem.mpaa),ab 6) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 6)]">FSK-6</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Germany:12) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 12) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 12)]">FSK-12</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Germany:18) | String.Contains(Window(Home).Property(ListItem.mpaa),ab 18) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 18)]">FSK-18</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Germany)|String.Contains(Window(Home).Property(ListItem.mpaa),FSK)| String.Contains(Window(Home).Property(ListItem.mpaa),o.A) | String.Contains(Window(Home).Property(ListItem.mpaa),FSK 0)]">FSK-0</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),besorolás alatt)">BA</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),korhatárra való tekintett nélkül megtekintetheto)">KN</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">12</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),16 éven aluliak számára nem ajánlott)">16</value>
        <value condition="String.Contains(Window(Home).Property(ListItem.mpaa),18 éven aluliak számára nem ajánlott)">18</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),France:U) | String.Contains(Window(Home).Property(ListItem.mpaa),partir de 3 ans) | String.Contains(Window(Home).Property(ListItem.mpaa),partir de 6 ans)]">CSA-U</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),France:-10) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 10 ans) | String.Contains(Window(Home).Property(ListItem.mpaa),des propos ou des images peuvent heurter)]">CSA-10</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),France:-12) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 12 ans)]">CSA-12</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),France:-16) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 16 ans)]">CSA-16</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),France:-18) | String.Contains(Window(Home).Property(ListItem.mpaa),Interdit aux moins de 18 ans)]">CSA-18</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:Livre) | String.Contains(Window(Home).Property(ListItem.mpaa),Livre)]">L</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:10) | String.Contains(Window(Home).Property(ListItem.mpaa),10 anos)]">10</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:12) | String.Contains(Window(Home).Property(ListItem.mpaa),12 anos)]">12</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:14) | String.Contains(Window(Home).Property(ListItem.mpaa),14 anos)]">14</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:16) | String.Contains(Window(Home).Property(ListItem.mpaa),16 anos)]">16</value>
        <value condition="[String.Contains(Window(Home).Property(ListItem.mpaa),Brazil:18) | String.Contains(Window(Home).Property(ListItem.mpaa),18 anos)]">18</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.mpaa)) + !String.Contains(Window(Home).Property(ListItem.mpaa),not rated)">$INFO[Window(Home).Property(ListItem.MPAA)]</value>
        <!-- fallback -->
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.MPAA)) + !String.Contains(Window(Home).Property(SkinHelper.ListItem.MPAA),not rated)">$INFO[Window(Home).Property(SkinHelper.ListItem.MPAA)]</value>
    </variable>

    <!-- Resolution Info -->
	<variable name="GetResolution">
		<!--normal-->
		<value condition="ListItem.IsStereoscopic">3D</value>
		<value condition="Integer.IsGreater(ListItem.VideoResolution,1080) | String.IsEqual(ListItem.VideoResolution,4K) | String.IsEqual(ListItem.VideoResolution,8K)">UHD</value>
		<value condition="Integer.IsGreater(ListItem.VideoResolution,700)">HD</value>
		<value condition="!String.IsEmpty(ListItem.VideoResolution)">SD</value>
		<!--home-->
		<value condition="Window(Home).Property(ListItem.IsStereoscopic)">3D</value>
		<value condition="Integer.IsGreater(Window(Home).Property(ListItem.VideoResolution),1080) | String.IsEqual(Window(Home).Property(ListItem.VideoResolution),4K)
		 | String.IsEqual(Window(Home).Property(ListItem.VideoResolution),8K)">UHD</value>
		<value condition="Integer.IsGreater(Window(Home).Property(ListItem.VideoResolution),700)">HD</value>
		<value condition="!String.IsEmpty(Window(Home).Property(ListItem.VideoResolution))">SD</value>
	</variable>

	<!-- Audio Channels Info (from 5.1 and up) -->
	<variable name="GetAudioChannels">
		<!--normal-->
		<value condition="String.IsEqual(ListItem.AudioChannels,6)">5.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,7)">6.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,8)">7.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,9)">8.1</value>
		<value condition="String.IsEqual(ListItem.AudioChannels,10)">9.1</value>
		<!--home-->
		<value condition="String.IsEqual(Window(Home).Property(ListItem.AudioChannels),6)">5.1</value>
		<value condition="String.IsEqual(Window(Home).Property(ListItem.AudioChannels),7)">6.1</value>
		<value condition="String.IsEqual(Window(Home).Property(ListItem.AudioChannels),8)">7.1</value>
		<value condition="String.IsEqual(Window(Home).Property(ListItem.AudioChannels),9)">8.1</value>
		<value condition="String.IsEqual(Window(Home).Property(ListItem.AudioChannels),10)">9.1</value>
	</variable>

	<!-- Thumbs Down/Up Includes -->
	<include name="ThumbsUpMinCondition">
        <include condition="Skin.String(ThumbsUpMin,-1)">DisableVisibility</include>
		<include condition="Skin.String(ThumbsUpMin,6)">ThumbsUpMin6</include>
		<include condition="Skin.String(ThumbsUpMin,7)">ThumbsUpMin7</include>
		<include condition="Skin.String(ThumbsUpMin,8)">ThumbsUpMin8</include>
		<include condition="Skin.String(ThumbsUpMin,9)">ThumbsUpMin9</include>
		<include condition="Skin.String(ThumbsUpMin,10)">ThumbsUpMin10</include>
	</include>

    <include name="ThumbsDownMaxCondition">
        <include condition="Skin.String(ThumbsDownMax,-1)">DisableVisibility</include>
        <include condition="Skin.String(ThumbsDownMax,5)">ThumbsDownMax5</include>
        <include condition="Skin.String(ThumbsDownMax,4)">ThumbsDownMax4</include>
        <include condition="Skin.String(ThumbsDownMax,3)">ThumbsDownMax3</include>
        <include condition="Skin.String(ThumbsDownMax,2)">ThumbsDownMax2</include>
        <include condition="Skin.String(ThumbsDownMax,1)">ThumbsDownMax1</include>
    </include>

	<include name="ThumbsUpMin6"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,6)</visible></include>
	<include name="ThumbsUpMin7"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,7)</visible></include>
	<include name="ThumbsUpMin8"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,8)</visible></include>
	<include name="ThumbsUpMin9"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,9)</visible></include>
	<include name="ThumbsUpMin10"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,10)</visible></include>

    <include name="ThumbsDownMax5"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,1) + Integer.IsLessOrEqual(ListItem.UserRating,5)</visible></include>
    <include name="ThumbsDownMax4"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,1) + Integer.IsLessOrEqual(ListItem.UserRating,4)</visible></include>
    <include name="ThumbsDownMax3"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,1) + Integer.IsLessOrEqual(ListItem.UserRating,3)</visible></include>
    <include name="ThumbsDownMax2"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,1) + Integer.IsLessOrEqual(ListItem.UserRating,2)</visible></include>
    <include name="ThumbsDownMax1"><visible>Integer.IsGreaterOrEqual(ListItem.UserRating,1) + Integer.IsLessOrEqual(ListItem.UserRating,1)</visible></include>

	<include name="DisableVisibility"><visible>false</visible></include>

    <!-- texture flipy/not for 'rate this title' button in dialoginfo -->
    <include name="ChangeRatingThumbsDown">
        <textureradioonfocus flipy="true" colordiffuse="ViewDetailsTextColor">thumbs-up.png</textureradioonfocus>
        <textureradioofffocus flipy="true" colordiffuse="ViewDetailsTextColor">thumbs-up.png</textureradioofffocus>
        <textureradioonnofocus flipy="true" colordiffuse="NetflixPrimaryTextColor">thumbs-up.png</textureradioonnofocus>
        <textureradiooffnofocus flipy="true" colordiffuse="NetflixPrimaryTextColor">thumbs-up.png</textureradiooffnofocus>
        <radioposy>22</radioposy>
    </include>
    <include name="ChangeRatingThumbsUp">
        <textureradioonfocus colordiffuse="ViewDetailsTextColor">thumbs-up.png</textureradioonfocus>
        <textureradioofffocus colordiffuse="ViewDetailsTextColor">thumbs-up.png</textureradioofffocus>
        <textureradioonnofocus colordiffuse="NetflixPrimaryTextColor">thumbs-up.png</textureradioonnofocus>
        <textureradiooffnofocus colordiffuse="NetflixPrimaryTextColor">thumbs-up.png</textureradiooffnofocus>
        <radioposy>0</radioposy>
    </include>

    <!-- netflix home clearlogo -->
    <variable name="HomeNetflixInfoClearlogo">
        <!-- normal -->
        <value condition="!String.IsEmpty(ListItem.ChannelLogo)">$INFO[ListItem.ChannelLogo]</value>
        <value condition="!String.IsEmpty(ListItem.Art(tvshow.clearlogo))">$INFO[ListItem.Art(tvshow.clearlogo)]</value>
        <value condition="!String.IsEmpty(ListItem.Art(clearlogo))">$INFO[ListItem.Art(clearlogo)]</value>
        <!-- spotlight -->
        <value condition="[Control(1508).HasFocus | ControlGroup(505).HasFocus()] + !String.IsEmpty(Container(1508).ListItem.Art(clearlogo))">$INFO[Container(1508).ListItem.Art(clearlogo)]</value>
        <!-- home -->
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.ChannelLogo))">$INFO[Window(Home).Property(ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(ListItem.Art.ClearLogo))">$INFO[Window(home).Property(ListItem.Art.ClearLogo)]</value>
        <!-- skinhelper fallback -->
        <value condition="!String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.ChannelLogo))">$INFO[Window(Home).Property(SkinHelper.ListItem.ChannelLogo)]</value>
        <value condition="!String.IsEmpty(Window(home).Property(SkinHelper.ListItem.Art.ClearLogo))">$INFO[Window(home).Property(SkinHelper.ListItem.Art.ClearLogo)]</value>
    </variable>

    <!-- Netflix Sublabel - tagline/watch now/album or song/pvr -->
    <variable name="NetflixSublabel">
        <!-- Tagline Info -->
        <value condition="!String.IsEmpty(ListItem.TagLine)">[B]$INFO[ListItem.TagLine][/B]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.TagLine))">[B]$INFO[Window(Home).Property(ListItem.TagLine)][/B]</value>
        <!-- Watch Tag Info -->
        <value condition="[ControlGroup(505).HasFocus() + Integer.IsGreater(Container(1508).NumItems,0)] | [String.IsEqual(ListItem.DBTYPE,tvshow)  | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),tvshow)]">$VAR[WatchNowTagInfo]</value>
        <!-- Album/Song Info -->
        <value condition="[String.IsEqual(ListItem.DBTYPE,album)  | String.IsEqual(Window(Home).Property(ListItem.Property(DBTYPE)),album)]">$INFO[ListItem.Album]</value>
        <value condition="!String.IsEmpty(ListItem.Artist)">$INFO[ListItem.TrackNumber,#, ]$INFO[ListItem.Title, ","]$INFO[ListItem.Album, (,)]</value>
        <!-- PVR Info -->
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.Property(StartDateTime))">$INFO[ListItem.Channel]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.Property(DateTime)) + !String.IsEmpty(ListItem.Label2)">$INFO[ListItem.Label2]</value>
        <value condition="String.IsEmpty(ListItem.DBTYPE) + !String.IsEmpty(ListItem.StartTime)">$INFO[ListItem.Label]</value>
    </variable>

    <!-- Watch Tag Info -->
    <!-- localize -->
    <variable name="WatchNowTagInfo">
        <value condition="Integer.IsGreater(ListItem.Property(TotalSeasons),1) + String.IsEqual(ListItem.Property(UnWatchedEpisodes),ListItem.Property(TotalEpisodes))">[B]Watch Season 1 Now[/B]</value>
        <value condition="ControlGroup(505).HasFocus()">[B]Watch Now[/B]</value>
    </variable>

    <!-- Netflix More Details (pseudo-random) -->
    <variable name="NetflixMoreDetails">
        <value condition="Integer.IsLessOrEqual(System.Time(ss),15) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.Awards))">[I]$INFO[Window(Home).Property(SkinHelper.ListItem.Awards)][/I]</value>
        <value condition="Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(Window(Home).Property(SkinHelper.ListItem.CastListing))">[I]$INFO[Window(Home).Property(SkinHelper.ListItem.CastListing)][/I]</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + Integer.IsGreater(Window(Home).Property(SkinHelper.ListItem.IMDB.Top250),0)">[I]Ranked $INFO[Window(Home).Property(SkinHelper.ListItem.IMDB.Top250)] in IMDB Top 250[/I]</value>
        <value condition="Integer.IsGreater(System.Time(ss),15) + Integer.IsLessOrEqual(System.Time(ss),30) + !String.IsEmpty(ListItem.Director)">[I]$INFO[ListItem.Director][/I]</value>
        <value condition="!String.IsEmpty(ListItem.Genre)">[I]$INFO[ListItem.Genre][/I]</value>
    </variable>

    <!-- line1: 'Season X Episode X' line: 2 'episode title' format -->
    <variable name="NetflixEpisodeInfoLabel">
        <value condition="!String.IsEmpty(ListItem.Season) + !String.IsEmpty(ListItem.Episode) +
        !String.IsEmpty(ListItem.Title)">[B][CAPITALIZE]$INFO[ListItem.Season,$LOCALIZE[36904] ,]$INFO[ListItem.Episode, $LOCALIZE[36906] ,][/CAPITALIZE][/B][CR]$INFO[ListItem.Title]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(ListItem.Season)) + !String.IsEmpty(Window(Home).Property(ListItem.Episode)) + !String.IsEmpty(Window(Home).Property(ListItem.Title))">[B][CAPITALIZE]$INFO[Window(Home).Property(ListItem.Season),$LOCALIZE[36904] ,]$INFO[Window(Home).Property(ListItem.Episode), $LOCALIZE[36906] ,][/CAPITALIZE][/B][CR]$INFO[Window(Home).Property(ListItem.Title)]</value>
        <!-- fallback -->
        <value>[B][CAPITALIZE]$INFO[Window(Home).Property(ListItem.Label)][/CAPITALIZE][/B]</value>
    </variable>

    <!-- 'SxxExx "episode_title"' format-->
    <variable name="NetflixDialogEpisodeInfoLabel">
        <value condition="[String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + !String.IsEmpty(Container(5050).ListItem.Season) + !String.IsEmpty(Container(5050).ListItem.Episode) +
        !String.IsEmpty(Container(5050).ListItem.Title)">[B]$INFO[Container(5050).ListItem.Season,S,]$INFO[Container(5050).ListItem.Episode,E,]$INFO[Container(5050).ListItem.Title, ","][/B]</value>
        <value condition="!String.IsEmpty(ListItem.Season) + !String.IsEmpty(ListItem.Episode) +
        !String.IsEmpty(ListItem.Title)">[B][UPPERCASE]$INFO[ListItem.Season,S,]$INFO[ListItem.Episode,E,][/UPPERCASE]$INFO[ListItem.Title, ","][/B]</value>
        <!-- fallback -->
        <value>[B]$INFO[Window(Home).Property(ListItem.Label)][/B]</value>
    </variable>

    <!-- play/resume label -->
    <variable name="PlayOrResumeLabel">
        <value condition="ListItem.IsResumable">$LOCALIZE[13404]</value>
        <value>$LOCALIZE[208]</value>
    </variable>

    <!-- next-up content for info dialog -->
    <variable name="InfoDialogNextUpContent">
        <value condition="[String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + Integer.IsGreater(ListItem.Property(unwatchedepisodes),0) + !String.IsEmpty(ListItem.DBID)">videodb://inprogresstvshows/$INFO[ListItem.DBID]/-2/?tvshowid=$INFO[ListItem.DBID]</value>
    </variable>

    <!-- plot outline prioritized and per-episode plot -->
    <variable name="NetflixInfoDialogPlot">
        <value condition="Skin.HasSetting(ShowEpisodePlotInfoDialog) + [String.IsEqual(ListItem.DBType,tvshow) | Container.Content(tvshows)] + !String.IsEmpty(Container(5050).ListItem.Plot)">$INFO[Container(5050).ListItem.Plot]</value>
        <!-- contains is a workaround to ignore bad scraped outline plots, should be solved at scraper level -->
        <value condition="!String.IsEmpty(ListItem.PlotOutline) + !String.Contains(ListItem.PlotOutline,$LOCALIZE[20339]: )">$INFO[ListItem.PlotOutline]</value>
        <value>$VAR[Plots]</value>
    </variable>

    <variable name="NetflixInfoDialogDetailsTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>NetflixSecondaryTextColor</value>
    </variable>

    <variable name="NetflixInfoDialogButtonsTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>NetflixPrimaryTextColor</value>
    </variable>

    <variable name="NetflixInfoDialogPlotTextColor">
        <value condition="!String.IsEmpty(Window(Home).Property(TrailerOnLoad)) + String.IsEqual(Window(Home).Property(TrailerPlaying),windowed)">white</value>
        <value>NetflixPrimaryTextColor</value>
    </variable>

    <!-- TVShow title & fallback for skin widgets -->
    <variable name="TVShowTitle">
        <value condition="String.IsEqual(ListItem.DBType,episode) + !String.IsEmpty(Window(Home).Property(ListItem.TvShowTitle))">$INFO[Window(Home).Property(ListItem.TvShowTitle)]</value>
        <value condition="!String.IsEmpty(ListItem.TVShowTitle)">$INFO[ListItem.TVShowTitle]</value>
        <value>$INFO[ListItem.Title]</value>
    </variable>

    <!-- Get NextUp Episode number and subtracts one for playoffset (play from beginning workaround) -->
    <variable name="NextUpEpisodeMinusOne">
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,1)">0</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,2)">1</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,3)">2</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,4)">3</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,5)">4</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,6)">5</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,7)">6</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,8)">7</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,9)">8</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,10)">9</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,11)">10</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,12)">11</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,13)">12</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,14)">13</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,15)">14</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,16)">15</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,17)">16</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,18)">17</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,19)">18</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,20)">19</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,21)">20</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,22)">21</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,23)">22</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,24)">23</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,25)">24</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,26)">25</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,27)">26</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,28)">27</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,29)">28</value>
        <value condition="Integer.IsEqual(Container(5050).ListItem.Episode,30)">29</value>
        <value>-1</value>
    </variable>

    <!-- Next Up Notification vars -->

    <!-- next up resolution - is currently missing in UP-NEXT addon
    <variable name="NextUpResolution">
        <value condition="Integer.IsGreater(Control.GetLabel(3011),1080)">UHD</value>
        <value condition="Integer.IsGreater(Control.GetLabel(3011),700)">HD</value>
        <value condition="Integer.IsLess(Control.GetLabel(3011),700)">SD</value>
    </variable> -->
    <!-- next up thumb episode/tvshow based on setting preference -->
    <variable name="NextUpThumb">
        <value condition="!String.IsEmpty(Window.Property(fanart)) + Skin.HasSetting(PreferTvShowThumbWidget)">$INFO[Window.Property(fanart)]</value>
        <value condition="!String.IsEmpty(Window.Property(thumb))">$INFO[Window.Property(thumb)]</value>
        <value condition="!String.IsEmpty(Window.Property(fanart))">$INFO[Window.Property(fanart)]</value>
    </variable>
</includes>

